# For this analysis, I downloaded a dataset from Kaggle: "Spotify top 50 songs in 2021".
# Then I used SQLite Studio to create a table.

# Create table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

# I uploaded a .CSV file containing the Spotify data into the table.
# Then I analyzed the data with these questions and SQL queries:

# 1. How many songs are there in the table?
SELECT COUNT(track_ID)
FROM BIT_DB.Spotifydata;

# 2. What is the least popular song?
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 1;

# 3. Which 5 songs are the best to dance to?
SELECT artist_name, track_name, danceability
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC
LIMIT 5;

# 4. Find the average popularity of songs for each key and rank them from highest to lowest.
SELECT AVG(popularity) AS avg_popularity,
CASE
    WHEN song_key = 11 THEN 'B'
    WHEN song_key = 10 THEN 'A Sharp/B flat'
    WHEN song_key = 9 THEN 'A'
    WHEN song_key = 8 THEN 'G Sharp/A flat'
    WHEN song_key = 7 THEN 'G'
    WHEN song_key = 6 THEN 'F Sharp/G flat'
    WHEN song_key = 5 THEN 'F'
    WHEN song_key = 4 THEN 'E Sharp/F flat'
    WHEN song_key = 3 THEN 'E'
    WHEN song_key = 3 THEN 'D Sharp/E flat'
    WHEN song_key = 2 THEN 'D'
    WHEN song_key = 1 THEN 'C Sharp/D flat'
    WHEN song_key = 0 THEN 'C'
    WHEN song_key = -1 THEN 'no key detected'
END AS music_key
FROM BIT_DB.Spotifydata
WHERE song_key IS NOT NULL
GROUP BY music_key
ORDER BY avg_popularity DESC;

# 5. How long is the longest song in minutes instead of milliseconds, and which song is it?
SELECT CAST(MAX(duration_ms) AS float)/60000 AS duration_min,
    track_name,
    artist_name
FROM BIT_DB.Spotifydata;

# 6. Select all the songs in minor key that also have a 4/4 time signature.
SELECT artist_name,
    track_name,
    song_mode,
    time_signature
FROM BIT_DB.Spotifydata
WHERE song_mode = 0
AND time_signature = 4;

# 7. Which artists had the most songs in the top 50?
SELECT artist_name, COUNT(artist_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(artist_name) DESC;

# 8. Is there any correlation between how many words are in a song and energy level?
SELECT AVG(speechiness), AVG(energy)
FROM BIT_DB.Spotifydata;
